{"ast":null,"code":"function FocusGroup(options) {\n  options = options || {};\n  this._settings = {\n    forwardArrows: options.forwardArrows || ['down'],\n    backArrows: options.backArrows || ['up'],\n    wrap: options.wrap,\n    stringSearch: options.stringSearch,\n    stringSearchDelay: 800\n  };\n  this._searchString = '';\n  this._members = [];\n  if (options.members) this.setMembers(options.members);\n  this._boundHandleKeydownEvent = this._handleKeydownEvent.bind(this);\n}\n\nFocusGroup.prototype.activate = function () {\n  // Use capture in case other libraries might grab it first -- i.e. React\n  document.addEventListener('keydown', this._boundHandleKeydownEvent, true);\n  return this;\n};\n\nFocusGroup.prototype.deactivate = function () {\n  document.removeEventListener('keydown', this._boundHandleKeydownEvent, true);\n\n  this._clearSearchStringRefreshTimer();\n\n  return this;\n};\n\nFocusGroup.prototype._handleKeydownEvent = function (event) {\n  // Only respond to keyboard events when\n  // focus is already within the focus-group\n  var activeElementIndex = this._getActiveElementIndex();\n\n  if (activeElementIndex === -1) return;\n  var arrow = getEventArrowKey(event);\n\n  if (!arrow) {\n    this._handleNonArrowKey(event);\n\n    return;\n  }\n\n  if (this._settings.forwardArrows.indexOf(arrow) !== -1) {\n    event.preventDefault();\n    this.moveFocusForward();\n    return;\n  }\n\n  if (this._settings.backArrows.indexOf(arrow) !== -1) {\n    event.preventDefault();\n    this.moveFocusBack();\n    return;\n  }\n};\n\nFocusGroup.prototype.moveFocusForward = function () {\n  var activeElementIndex = this._getActiveElementIndex();\n\n  var targetIndex;\n\n  if (activeElementIndex < this._members.length - 1) {\n    targetIndex = activeElementIndex + 1;\n  } else if (this._settings.wrap) {\n    targetIndex = 0;\n  } else {\n    targetIndex = activeElementIndex;\n  }\n\n  this.focusNodeAtIndex(targetIndex);\n  return targetIndex;\n};\n\nFocusGroup.prototype.moveFocusBack = function () {\n  var activeElementIndex = this._getActiveElementIndex();\n\n  var targetIndex;\n\n  if (activeElementIndex > 0) {\n    targetIndex = activeElementIndex - 1;\n  } else if (this._settings.wrap) {\n    targetIndex = this._members.length - 1;\n  } else {\n    targetIndex = activeElementIndex;\n  }\n\n  this.focusNodeAtIndex(targetIndex);\n  return targetIndex;\n};\n\nFocusGroup.prototype._handleNonArrowKey = function (event) {\n  if (!this._settings.stringSearch) return; // While a string search is underway, ignore spaces\n  // and prevent the default space-key behavior\n\n  if (this._searchString !== '' && (event.key === ' ' || event.keyCode === 32)) {\n    event.preventDefault();\n    return -1;\n  } // Only respond to letter keys\n\n\n  if (!isLetterKeyCode(event.keyCode)) return -1; // If the letter key is part of a key combo,\n  // let it do whatever it was going to do\n\n  if (event.ctrlKey || event.metaKey || event.altKey) return -1;\n  event.preventDefault();\n\n  this._addToSearchString(String.fromCharCode(event.keyCode));\n\n  this._runStringSearch();\n};\n\nFocusGroup.prototype._clearSearchString = function () {\n  this._searchString = '';\n};\n\nFocusGroup.prototype._addToSearchString = function (letter) {\n  // Always store the lowercase version of the letter\n  this._searchString += letter.toLowerCase();\n};\n\nFocusGroup.prototype._startSearchStringRefreshTimer = function () {\n  var self = this;\n\n  this._clearSearchStringRefreshTimer();\n\n  this._stringSearchTimer = setTimeout(function () {\n    self._clearSearchString();\n  }, this._settings.stringSearchDelay);\n};\n\nFocusGroup.prototype._clearSearchStringRefreshTimer = function () {\n  clearTimeout(this._stringSearchTimer);\n};\n\nFocusGroup.prototype._runStringSearch = function () {\n  this._startSearchStringRefreshTimer();\n\n  this.moveFocusByString(this._searchString);\n};\n\nFocusGroup.prototype.moveFocusByString = function (str) {\n  var member;\n\n  for (var i = 0, l = this._members.length; i < l; i++) {\n    member = this._members[i];\n    if (!member.text) continue;\n\n    if (member.text.indexOf(str) === 0) {\n      return focusNode(member.node);\n    }\n  }\n};\n\nFocusGroup.prototype._findIndexOfNode = function (searchNode) {\n  for (var i = 0, l = this._members.length; i < l; i++) {\n    if (this._members[i].node === searchNode) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nFocusGroup.prototype._getActiveElementIndex = function () {\n  return this._findIndexOfNode(document.activeElement);\n};\n\nFocusGroup.prototype.focusNodeAtIndex = function (index) {\n  var member = this._members[index];\n  if (member) focusNode(member.node);\n  return this;\n};\n\nFocusGroup.prototype.addMember = function (member, index) {\n  var node = member.node || member;\n  var nodeText = member.text || node.getAttribute('data-focus-group-text') || node.textContent || '';\n\n  this._checkNode(node);\n\n  var cleanedNodeText = nodeText.replace(/[\\W_]/g, '').toLowerCase();\n  var member = {\n    node: node,\n    text: cleanedNodeText\n  };\n\n  if (index !== null && index !== undefined) {\n    this._members.splice(index, 0, member);\n  } else {\n    this._members.push(member);\n  }\n\n  return this;\n};\n\nFocusGroup.prototype.removeMember = function (member) {\n  var removalIndex = typeof member === 'number' ? member : this._findIndexOfNode(member);\n  if (removalIndex === -1) return;\n\n  this._members.splice(removalIndex, 1);\n\n  return this;\n};\n\nFocusGroup.prototype.clearMembers = function () {\n  this._members = [];\n  return this;\n};\n\nFocusGroup.prototype.setMembers = function (nextMembers) {\n  this.clearMembers();\n\n  for (var i = 0, l = nextMembers.length; i < l; i++) {\n    this.addMember(nextMembers[i]);\n  }\n\n  return this;\n};\n\nFocusGroup.prototype.getMembers = function () {\n  return this._members;\n};\n\nFocusGroup.prototype._checkNode = function (node) {\n  if (!node.nodeType || node.nodeType !== window.Node.ELEMENT_NODE) {\n    throw new Error('focus-group: only DOM nodes allowed');\n  }\n\n  return node;\n};\n\nfunction getEventArrowKey(event) {\n  if (event.key === 'ArrowUp' || event.keyCode === 38) return 'up';\n  if (event.key === 'ArrowDown' || event.keyCode === 40) return 'down';\n  if (event.key === 'ArrowLeft' || event.keyCode === 37) return 'left';\n  if (event.key === 'ArrowRight' || event.keyCode === 39) return 'right';\n  return null;\n}\n\nfunction isLetterKeyCode(keyCode) {\n  return keyCode >= 65 && keyCode <= 90;\n}\n\nfunction focusNode(node) {\n  if (!node || !node.focus) return;\n  node.focus();\n  if (node.tagName.toLowerCase() === 'input') node.select();\n}\n\nmodule.exports = function createFocusGroup(options) {\n  return new FocusGroup(options);\n};","map":null,"metadata":{},"sourceType":"script"}