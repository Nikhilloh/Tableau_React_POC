{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createReactClass = require('create-react-class');\n\nvar specialAssign = require('./specialAssign');\n\nvar checkedProps = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  tabId: PropTypes.string.isRequired,\n  tag: PropTypes.string,\n  role: PropTypes.string,\n  active: PropTypes.bool\n};\nmodule.exports = createReactClass({\n  displayName: 'AriaTabPanel-TabPanel',\n  propTypes: checkedProps,\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tag: 'div',\n      role: 'tabpanel'\n    };\n  },\n  contextTypes: {\n    atpManager: PropTypes.object.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isActive: this.context.atpManager.memberStartsActive(this.props.tabId) || false\n    };\n  },\n  handleKeyDown: function handleKeyDown(event) {\n    if (event.ctrlKey && event.key === 'ArrowUp') {\n      event.preventDefault();\n      this.context.atpManager.focusTab(this.props.tabId);\n    }\n  },\n  updateActiveState: function updateActiveState(nextActiveState) {\n    this.setState({\n      isActive: nextActiveState\n    });\n  },\n  registerWithManager: function registerWithManager(el) {\n    if (this.isRegistered) return;\n    this.isRegistered = true;\n    this.context.atpManager.registerTabPanel({\n      node: el,\n      update: this.updateActiveState,\n      tabId: this.props.tabId\n    });\n  },\n  render: function render() {\n    var props = this.props;\n    var isActive = props.active === undefined ? this.state.isActive || false : props.active;\n    var kids = typeof props.children === 'function' ? props.children({\n      isActive: isActive\n    }) : props.children;\n    var style = props.style || {};\n\n    if (!isActive) {\n      style.display = 'none';\n    }\n\n    var elProps = {\n      className: props.className,\n      id: this.context.atpManager.getTabPanelId(props.tabId),\n      onKeyDown: this.handleKeyDown,\n      role: props.role,\n      style: style,\n      'aria-hidden': !isActive,\n      'aria-describedby': props.tabId,\n      ref: this.registerWithManager\n    };\n    specialAssign(elProps, props, checkedProps);\n    return React.createElement(props.tag, elProps, kids);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}