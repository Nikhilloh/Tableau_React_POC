{"ast":null,"code":"var createFocusGroup = require('focus-group');\n\nfunction Manager(options) {\n  this.options = options;\n  var focusGroupOptions = {\n    wrap: true,\n    forwardArrows: ['down', 'right'],\n    backArrows: ['up', 'left'],\n    stringSearch: options.letterNavigation\n  };\n  this.focusGroup = createFocusGroup(focusGroupOptions); // These component references are added when the relevant components mount\n\n  this.tabs = [];\n  this.tabPanels = [];\n  this.activeTabId = options.activeTabId;\n}\n\nManager.prototype.activate = function () {\n  this.focusGroup.activate();\n};\n\nManager.prototype.memberStartsActive = function (tabId) {\n  if (this.activeTabId === tabId) {\n    return true;\n  }\n\n  if (this.activeTabId === undefined) {\n    this.activeTabId = tabId;\n    return true;\n  }\n\n  return false;\n};\n\nManager.prototype.registerTab = function (tabMember) {\n  if (tabMember.index === undefined) {\n    this.tabs.push(tabMember);\n  } else {\n    this.tabs.splice(tabMember.index, 0, tabMember);\n  }\n\n  var focusGroupMember = tabMember.letterNavigationText ? {\n    node: tabMember.node,\n    text: tabMember.letterNavigationText\n  } : tabMember.node;\n  this.focusGroup.addMember(focusGroupMember, tabMember.index);\n  var activeTabId = this.activeTabId;\n\n  if (!this.activeTabId || tabMember.active && tabMember.id !== this.activeTabId) {\n    activeTabId = tabMember.id;\n  }\n\n  this.activateTab(activeTabId);\n};\n\nManager.prototype.unregisterTab = function (tabId) {\n  var tabIdx;\n  var tab;\n\n  if (this.tabs && this.tabs.length > 0) {\n    this.tabs.forEach(function (tabMember, idx) {\n      if (tabMember.id === tabId) {\n        tabIdx = idx;\n        tab = tabMember;\n      }\n    });\n\n    if (tab && tab.node) {\n      this.tabs.splice(tabIdx, 1);\n      this.focusGroup.removeMember(tab.node);\n    }\n  }\n};\n\nManager.prototype.registerTabPanel = function (tabPanelMember) {\n  this.tabPanels.push(tabPanelMember);\n  this.activateTab(this.activeTabId);\n  this.activateTab(this.activeTabId || tabPanelMember.tabId);\n};\n\nManager.prototype.activateTab = function (nextActiveTabId) {\n  if (nextActiveTabId === this.activeTabId) return;\n  this.activeTabId = nextActiveTabId;\n\n  if (this.options.onChange) {\n    this.options.onChange(nextActiveTabId);\n    return;\n  }\n\n  this.tabPanels.forEach(function (tabPanelMember) {\n    tabPanelMember.update(nextActiveTabId === tabPanelMember.tabId);\n  });\n  this.tabs.forEach(function (tabMember) {\n    tabMember.update(nextActiveTabId === tabMember.id);\n  });\n};\n\nManager.prototype.handleTabFocus = function (focusedTabId) {\n  this.activateTab(focusedTabId);\n};\n\nManager.prototype.focusTab = function (tabId) {\n  var tabMemberToFocus = this.tabs.find(function (tabMember) {\n    return tabMember.id === tabId;\n  });\n  if (!tabMemberToFocus) return;\n  tabMemberToFocus.node.focus();\n};\n\nManager.prototype.destroy = function () {\n  this.focusGroup.deactivate();\n};\n\nManager.prototype.getTabPanelId = function (tabId) {\n  return tabId + '-panel';\n};\n\nmodule.exports = function (options) {\n  return new Manager(options);\n};","map":null,"metadata":{},"sourceType":"script"}