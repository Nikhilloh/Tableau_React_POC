{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createReactClass = require('create-react-class');\n\nvar createManager = require('./createManager');\n\nvar specialAssign = require('./specialAssign');\n\nvar checkedProps = {\n  children: PropTypes.node.isRequired,\n  activeTabId: PropTypes.string,\n  letterNavigation: PropTypes.bool,\n  onChange: PropTypes.func,\n  tag: PropTypes.string\n};\nmodule.exports = createReactClass({\n  displayName: 'AriaTabPanel-Wrapper',\n  propTypes: checkedProps,\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tag: 'div'\n    };\n  },\n  childContextTypes: {\n    atpManager: PropTypes.object.isRequired\n  },\n  getChildContext: function getChildContext() {\n    return {\n      atpManager: this.manager\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this.manager = createManager({\n      onChange: this.props.onChange,\n      activeTabId: this.props.activeTabId,\n      letterNavigation: this.props.letterNavigation\n    });\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.manager.destroy();\n  },\n  componentDidMount: function componentDidMount() {\n    this.manager.activate();\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    var updateActiveTab = prevProps.activeTabId === this.manager.activeTabId && prevProps.activeTabId !== this.props.activeTabId;\n\n    if (updateActiveTab) {\n      this.manager.activateTab(this.props.activeTabId);\n    }\n  },\n  render: function render() {\n    var props = this.props;\n    var elProps = {};\n    specialAssign(elProps, props, checkedProps);\n    return React.createElement(props.tag, elProps, props.children);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}