{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createReactClass = require('create-react-class');\n\nvar specialAssign = require('./specialAssign');\n\nvar checkedProps = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  id: PropTypes.string.isRequired,\n  tag: PropTypes.string,\n  role: PropTypes.string,\n  index: PropTypes.number,\n  active: PropTypes.bool,\n  letterNavigationText: PropTypes.string\n};\nmodule.exports = createReactClass({\n  displayName: 'AriaTabPanel-Tab',\n  propTypes: checkedProps,\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tag: 'div',\n      role: 'tab'\n    };\n  },\n  contextTypes: {\n    atpManager: PropTypes.object.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isActive: this.context.atpManager.memberStartsActive(this.props.id) || false\n    };\n  },\n  handleFocus: function handleFocus() {\n    this.context.atpManager.handleTabFocus(this.props.id);\n  },\n  handleRef: function handleRef(el) {\n    if (el) {\n      this.elRef = el;\n      this.registerWithManager(this.elRef);\n    }\n  },\n  updateActiveState: function updateActiveState(nextActiveState) {\n    this.setState({\n      isActive: nextActiveState\n    });\n  },\n  registerWithManager: function registerWithManager(el) {\n    if (this.isRegistered) return;\n    this.isRegistered = true;\n    this.context.atpManager.registerTab({\n      id: this.props.id,\n      node: el,\n      update: this.updateActiveState,\n      index: this.props.index,\n      letterNavigationText: this.props.letterNavigationText,\n      active: this.props.active === undefined ? this.state.isActive : this.props.active\n    });\n  },\n  unregisterWithManager: function unregisterWithManager() {\n    var props = this.props;\n    this.context.atpManager.unregisterTab(props.id);\n  },\n  render: function render() {\n    var props = this.props;\n    var isActive = props.active === undefined ? this.state.isActive : props.active;\n\n    var kids = function () {\n      if (typeof props.children === 'function') {\n        return props.children({\n          isActive: isActive\n        });\n      }\n\n      return props.children;\n    }();\n\n    var elProps = {\n      id: props.id,\n      tabIndex: isActive ? 0 : -1,\n      onClick: this.handleClick,\n      onFocus: this.handleFocus,\n      role: props.role,\n      'aria-selected': isActive,\n      'aria-controls': this.context.atpManager.getTabPanelId(props.id),\n      ref: this.handleRef\n    };\n    specialAssign(elProps, props, checkedProps);\n    return React.createElement(props.tag, elProps, kids);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.unregisterWithManager();\n  }\n});","map":null,"metadata":{},"sourceType":"script"}